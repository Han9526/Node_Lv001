1. 상품 작성 API
    - 상품명, 작성 내용, 작성자명, 비밀번호를 **request**에서 전달받기
    - 상품은 두 가지 상태, **판매 중(`FOR_SALE`)및 판매 완료(`SOLD_OUT`)** 를 가질 수 있습니다.
    - 상품 등록 시 기본 상태는 **판매 중(`FOR_SALE`)** 입니다.
2. 상품 목록 조회 API
    - 상품명, 작성자명, 상품 상태, 작성 날짜 조회하기
    - 상품 목록은 작성 날짜를 기준으로 **내림차순(최신순)** 정렬하기
3. 상품 상세 조회 API
    - 상품명, 작성 내용, 작성자명, 상품 상태, 작성 날짜 조회하기
4. 상품 정보 수정 API
    - 상품명, 작성 내용, 상품 상태, 비밀번호를 **request**에서 전달받기
    - 수정할 상품과 비밀번호 일치 여부를 확인한 후, 동일할 때만 글이 **수정**되게 하기
    - 선택한 상품이 존재하지 않을 경우, “상품 조회에 실패하였습니다." 메시지 반환하기
5. 상품 삭제 API
    - 비밀번호를 **request**에서 전달받기
    - 수정할 상품과 비밀번호 일치 여부를 확인한 후, 동일할 때만 글이 **삭제**되게 하기
    - 선택한 상품이 존재하지 않을 경우, “상품 조회에 실패하였습니다." 메시지 반환하기







1. 수정 및 삭제 API에서 Resource를 구분하기 위해서 어떤 방식으로 요청(Request) 하셨나요? (`param`, `query`, `body`)
2. 대표적인 HTTP Method의 4가지( `GET`, `POST`, `PUT`, `DELETE` )는 각각 어떤 상황에서 사용하였나요?
3. API 설계 시 RESTful한 원칙을 따랐나요? 어떤 부분이 RESTful한 설계를 반영하였고, 어떤 부분이 그렇지 않았나요?
4. 폴더 구조(Directory Structure)를 역할별로 분리하였다면, 어떤 이점을 가져다 주었을까요?
5. `mongoose`에서 상품 상태는 어떠한 방식으로 관리하였나요? 이 외에도 어떤 방법들이 있었을까요?